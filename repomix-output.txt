This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-24T23:34:57.372Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
genai-functions/
  main.py
.repomixignore
page.tsx

================================================================
Repository Files
================================================================

================
File: genai-functions/main.py
================
# %%
import os
import json
from typing import List
from datetime import datetime

# OpenAI
import openai

# SerpApi
from serpapi import GoogleSearch

# FastAPI
from fastapi import FastAPI
from pydantic import BaseModel

# Enable CORS utility
from fastapi.middleware.cors import CORSMiddleware


# Class representing a single message of the conversation between RAG application and user.
class Message(BaseModel):
    role: str
    content: str


# Class representing collection of messages above.
class Messages(BaseModel):
    messages: List[Message]


# %%

# Create a FastAPI App instance
app = FastAPI()

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Get today's date
# %%
today_date = datetime.today().strftime("%Y-%m-%d")
# %%
# %%
tools = [
    {
        "type": "function",
        "function": {
            "name": "flight_generator",
            "description": "Extract flight details from the user prompt.",
            "parameters": {
                "type": "object",
                "properties": {
                    "departure_id": {
                        "type": "string",
                        "description": "This represents the departure airport code in 3 letters. If you find a name of the country from user prompt, locate the most busiest airport and use it's IATA based 3-letter code, else if find an airport in the prompt, use it's IATA based airport code.",
                    },
                    "departure_date": {
                        "type": "string",
                        "description": f"This represents the departure date in YYYY-MM-DD format. If you can not find a date in user prompt, just use {today_date} as the fallback.",
                    },
                    "arrival_id": {
                        "type": "string",
                        "description": "This represents the arrival airport code in 3 letters. If you find a name of the country from user prompt, locate the most busiest airport and use it's IATA based 3-letter code, else if find an airport in the prompt, use it's IATA based airport code.",
                    },
                    "arrival_date": {
                        "type": "string",
                        "description": f"This represents the arrival date in YYYY-MM-DD format. If you can not find a date in user prompt, just use {today_date} as the fallback.",
                    },
                },
                "required": [
                    "departure_id",
                    "departure_date",
                    "arrival_id",
                    "arrival_date",
                ],
            },
        },
    },
]
# %%

# %%
client = openai.OpenAI(
    base_url="https://api.fireworks.ai/inference/v1",
    api_key=os.environ["FIREWORKS_API_KEY"],
)
# %%


@app.post("/chat")
def chat(messages: Messages):
    messages_json = (messages.model_dump())["messages"]
    # [
    # {
    #     "role": "user",
    #     "content": "Tell me flights from Paris to Zurich on 21st Oct 2024"
    # }
    # ]

    # Create System Context
    knowledge = (
        "You are a helpful assistant with access to functions. Use them if required."
    )
    messages_json.insert(0, {"role": "system", "content": knowledge})

    # [
    # {
    #     "role": "system",
    #     "content": "You are a helpful assistant with access to functions. Use them if required."
    # },
    # {
    #     "role": "user",
    #     "content": "Tell me flights from Paris to Zurich on 21st Oct 2024"
    # }
    # ]

    # Call Fireworks Function to determine the flights user asked for
    chat_completion = client.chat.completions.create(
        tools=tools,
        temperature=0.1,
        messages=[messages_json[0], messages_json[-1]],
        model="accounts/fireworks/models/firefunction-v2",
    )
    # Parse the generated function call to obtain the Airport codes and date of travel
    generated_tool_call = json.loads(
        chat_completion.choices[0].message.model_dump_json(include={"tool_calls"})
    )
    generated_args = generated_tool_call["tool_calls"][0]["function"]["arguments"]
    final_args = json.loads(generated_args)

    # {
    # "departure_id": "CDG",
    # "departure_date": "2024-10-21",
    # "arrival_id": "ZRH",
    # "arrival_date": "2024-10-21"
    # }

    params = {
        "api_key": os.environ["SERPAPI_API_KEY"],
    }
    if final_args["arrival_date"] is not None:
        # Create params for the SerpApi for finding flights matching the user query
        params.update(
            {
                "hl": "en",
                "currency": "USD",
                "engine": "google_flights",
                "arrival_id": final_args["arrival_id"],
                "return_date": final_args["arrival_date"],
                "departure_id": final_args["departure_id"],
                "outbound_date": final_args["departure_date"],
            }
        )

    # Obtain the relevant content on YouTube
    search = GoogleSearch(params)

    # Return it as the response to the API endpoint
    resp = search.get_dict()

    if final_args["arrival_date"] is not None:
        return {
            "flights": [
                {
                    "price": flight["price"],
                    "airline_logo": single_flight["airline_logo"],
                    "arrival_airport_name": single_flight["arrival_airport"]["name"],
                    "arrival_airport_time": single_flight["arrival_airport"]["time"],
                    "departure_airport_name": single_flight["departure_airport"][
                        "name"
                    ],
                    "departure_airport_time": single_flight["departure_airport"][
                        "time"
                    ],
                }
                for flight in resp["best_flights"]
                for single_flight in flight["flights"][:3]
            ]
        }


#### OUTPUT

# Final Output
# When you send the message "Tell me flights from Paris to Zurich on 21st Oct 2024",
# the final response returned by your FastAPI application would look something like this:

# {
#   "flights": [
#     {
#       "price": "$200",
#       "airline_logo": "https://logo.png",
#       "arrival_airport_name": "Zurich Airport",
#       "arrival_airport_time": "12:00 PM",
#       "departure_airport_name": "Charles de Gaulle Airport",
#       "departure_airport_time": "10:00 AM"
#     }
#   ]
# }

================
File: .repomixignore
================
__pycache__

================
File: page.tsx
================
// File: app/page.tsx

"use client";

import { useChat } from "ai/react";

interface FlightObj {
  airline_logo: string;
  price: string | number;
  departure_airport_name: string;
  departure_airport_time: string;
  arrival_airport_name: string;
  arrival_airport_time: string;
}

export default function () {
  const { messages, handleSubmit, input, handleInputChange } = useChat({
    api: "http://localhost:8000/chat",
  });

  return (
    <div className="flex flex-col bg-white items-center w-screen min-h-screen">
      <form
        onSubmit={handleSubmit}
        className="mt-12 flex w-full max-w-[300px] flex-col"
      >
        <input
          id="input"
          name="prompt"
          value={input}
          autoComplete="off"
          onChange={handleInputChange}
          placeholder="What kind of movies you want to watch?"
          className="mt-3 min-w-[300px] rounded border px-2 py-1 outline-none focus:border-black text-black"
        />
        <button
          type="submit"
          className="mt-3 max-w-max rounded border px-3 py-1 outline-none text-black hover:bg-black hover:text-white"
        >
          Ask &rarr;
        </button>
        {messages.map((message, i) =>
          message.role === "assistant" ? (
            <div key={`response_${i}`} className="mt-3 pt-3 flex flex-col">
              {JSON.parse(message.content)["flights"]
                ? JSON.parse(message.content).flights.map(
                    (flight: FlightObj, _: number) => (
                      <div
                        key={`flight_${_}_${i}`}
                        className="mt-3 flex flex-col"
                      >
                        <div className="flex flex-row items-center gap-x-3">
                          <img
                            loading="lazy"
                            className="size-10"
                            src={flight.airline_logo}
                            alt="Airline logo"
                          />
                          <span>USD {flight.price}</span>
                        </div>
                        <div className="flex flex-row items-center gap-x-3">
                          <span>{flight.departure_airport_name}</span>
                          <span>{flight.departure_airport_time}</span>
                        </div>
                        <div className="flex flex-row items-center gap-x-3">
                          <span>{flight.arrival_airport_name}</span>
                          <span>{flight.arrival_airport_time}</span>
                        </div>
                      </div>
                    )
                  )
                : null}
            </div>
          ) : (
            <div
              className="mt-3 border-t text-black pt-3"
              key={message.content + i}
            >
              {message.content}
            </div>
          )
        )}
      </form>
    </div>
  );
}
